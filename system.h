#ifndef __system__
#define __system__

typedef   unsigned short  WORD;
typedef   unsigned char   BYTE;
typedef   unsigned long   DWORD;

#define   NULL ((void *)0)

#define CK_PLAY_ALWAYS    0
#define CK_PLAY_PERDAY    1
#define CK_PLAY_PERIOD    2

//¿?¿?¿?¿?¿?
#define LED_MONO			1
#define LED_DOUBLE			2

//¿?¿?¿?¿?¿?¿?
#define ROOT_UPDATE           0x13  //¿?¿?¿?¿?¿?¿?¿?
#define ROOT_FONTSET          0x14  //¿?¿?¿?¿?

#define ROOT_PLAY             0x21  //¿?¿?¿?¿?¿?¿?¿?¿?RAM¿?¿?¿?¿?¿?
#define ROOT_DOWNLOAD         0x22  //¿?¿?¿?¿?¿?¿?¿?¿?Flash
#define ROOT_PLAY_CHAPTER     0x23  //¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_REGION      0x25  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_LEAF        0x27  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_OBJECT      0x29  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY             0xB1  //¿?¿?¿?¿?¿?¿?¿?¿?RAM¿?¿?¿?¿?¿?
//#define ROOT_DOWNLOAD         0xB2  //¿?¿?¿?¿?¿?¿?¿?¿?Flash
//#define ROOT_PLAY_CHAPTER     0xB3  //¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_REGION      0xB5  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_LEAF        0xB7  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_OBJECT      0xB9  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?

#define ACTMODE_INSERT        0x00
#define ACTMODE_REPLACE       0x01

#define ID_CHAPTER            0x3F
#define ID_REGION             0x3E
#define ID_LEAF               0x30
#define ID_WINDOW             0x31
#define ID_DCLOCK             0x32
#define ID_STRING             0x33
#define ID_EFFECT             0x34
#define ID_FONTSET            0xEE
#define ID_PIXELS             0x36
#define ID_PIXELSET           0x37
#define ID_MOVIE              0x38
#define ID_COUNTER	          0x39
#define ID_WINDOWS            0x3B
#define ID_STRINGS            0x3C

#define ID_TEMPERATURE        0x50
#define ID_HUMIDITY           0x51
#define ID_NOISE              0x52
#define ID_IMPORT             0x53
#define ID_ACLOCK             0x60
#define ID_CAMPAIGNTIME       0x61

#define PLAY_MODE_NORMAL      0x00  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define PLAY_MODE_WAIT        0x01  //¿?¿?¿?¿?¿?¿?¿?¿?

#define FONT_SET_16           0x0
#define FONT_SET_24           0x1

#define BITMAP_RED            1
#define BITMAP_GREEN          2
#define BITMAP_YELLOW         3
#define BITMAP_COLOR          4

#define DF_YEAR               1
#define DF_MONTH              2
#define DF_DAY                3
#define DF_WEEK               4
#define DF_HOUR               5
#define DF_MINUTE             6
#define DF_SECOND             7
#define DF_USER               8
#define DF_FLICKER            9
#define DF_CHNDATE            10
#define DF_CHNMONTH           10
#define DF_CHNDAY             11

typedef struct _RECT{
  long left;
  long top;
  long right;
  long bottom;
}TRect, *PRect;

typedef struct TIMESTAMP{
  long time;
  long date;
}TTimeStamp, *PTimeStamp;

typedef struct FONTSET{
  WORD  id;             //¿?¿?¿?¿?
  WORD  width;          //¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?
  BYTE  name[16];       //¿?¿?¿?¿?¿?
}TFontSet;
typedef TFontSet * PFontSet;

//¿?¿?¿?¿?¿?
typedef struct ROOT{
  WORD  id;              //¿?¿?¿?¿?¿?
  WORD  color;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  DWORD size;            //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD count;           //¿?¿?¿?¿?¿?
  long  survive;         //¿?¿?¿?¿?¿?¿?
  WORD  flag;            //¿?¿?
  WORD  Reserved;
}TRoot, *PRoot;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct CUSTOMACTION{
  TRoot header;          //¿?¿?¿?¿?¿?
  WORD  actionmode;      //¿?¿?¿?¿?(¿?¿?/¿?¿?)
  WORD  chapterindex;    //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  regionindex;     //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  leafindex;       //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  objectindex;     //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  reserved;
}TCustomAction, *PCustomAction;

//¿?¿?¿?¿?¿?¿?¿?
typedef struct CHAPTER{
  WORD  id;             //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  no;             //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  wait;           //¿?¿?¿?¿?¿?¿?¿?¿?(=1¿?¿?; =0¿?¿?¿?¿?¿?)
  WORD  repeat;         //¿?¿?¿?¿?¿?¿?
  WORD  count;          //¿?¿?¿?¿?¿?¿?
  WORD  Reserved;
  DWORD time;
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  kind;           //¿?¿?¿?¿?¿?¿?0=¿?¿?¿?¿?¿?1=¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?3=¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  week;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  TTimeStamp fromtime;  //¿?¿?¿?¿?
  TTimeStamp totime;    //¿?¿?¿?¿?
}TChapter, *PChapter;

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct REGION{
  WORD  id;             //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  no;             //¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  over;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?mode¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  count;          //¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  TRect rect;           //¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  Reserved1;
  WORD  Reserved2;
}TRegion, *PRegion;

//¿?¿?¿?¿?¿?¿?¿?
typedef struct LEAF{
  WORD  id;             //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  no;
  WORD  wait;           //¿?¿?¿?¿?¿?¿?¿?¿?(=1¿?¿?; =0¿?¿?¿?¿?¿?)
  WORD  serial;         //¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  count;          //¿?¿?¿?¿?
  WORD  Reserved;
  DWORD time;           //¿?¿?¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  Reserved1;
  WORD  Reserved2;
}TLeaf, *PLeaf;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct OBJECT{
  WORD  id;             //¿?¿?¿?¿?
  BYTE  transparent;    //¿?¿?¿?¿?
  BYTE  border;
  DWORD size;           //¿?¿?¿?¿?¿?
  TRect rect;           //¿?¿?¿?¿?¿?¿?
}TObject, *PObject;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?TWindow¿?¿?¿?¿?¿?¿?TString¿?¿?
typedef struct WINDOWS{
  TObject     object;     //¿?¿?¿?¿?¿?¿?¿?
  BYTE        method;     //¿?¿?¿?¿?
  BYTE        speed;      //¿?¿?¿?¿?
  WORD        count;      //¿?¿?¿?¿?Window¿?¿?
}TWindows;
typedef TWindows * PWindows;

//¿?¿?¿?¿?¿?¿?
typedef struct STRING{
  WORD        id;
  BYTE        inMethod;   //¿?¿?¿?¿?
  BYTE        outMethod;  //¿?¿?¿?¿?
  BYTE        stopMethod; //¿?¿?¿?¿?
  BYTE        reserved;
  WORD        inSpeed;    //¿?¿?¿?¿?
  WORD        outSpeed;   //¿?¿?¿?¿?
  WORD        stopSpeed;  //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD       stoptime;   //¿?¿?¿?¿?
  long        stopx;      //¿?¿?¿?¿?
  DWORD       size;       //¿?¿?¿?¿?
  DWORD       color;      //¿?¿?¿?¿?
  WORD        fontset;    //¿?¿?¿?(¿?¿?¿?¿? 0=16¿?¿? 1=24¿?¿?)
  WORD        Reserved;
}TString;
typedef TString * PString;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?TPixels
typedef struct WINDOW{
  WORD        id;
  BYTE        inMethod;   //¿?¿?¿?¿?
  BYTE        outMethod;  //¿?¿?¿?¿?
  BYTE        stopMethod; //¿?¿?¿?¿?
  BYTE        reserved;
  WORD        inSpeed;    //¿?¿?¿?¿?
  WORD        outSpeed;   //¿?¿?¿?¿?
  WORD        stopSpeed;  //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD       stoptime;   //¿?¿?¿?¿?
  long        stopx;      //¿?¿?¿?¿?
  DWORD       size;       //¿?¿?¿?¿?
}TWindow;
typedef TWindow * PWindow;

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct PIXELS{
  WORD   id;            //¿?¿?¿?¿?
  WORD   bits;          //¿?¿?¿?¿?¿?
  long   width;         //¿?¿?¿?¿?
  long   height;        //¿?¿?¿?¿?
  DWORD  size;          //¿?¿?¿?¿?
}TPixels;
typedef TPixels * PPixels;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct PIXELSET{
  WORD   id;            //¿?¿?¿?¿?
  WORD   count;         //TPixels¿?¿?¿?¿?
  DWORD  size;          //¿?¿?¿?¿?¿?
}TPixelSet;
typedef TPixelSet * PPixelSet;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define MAX_DATETIME_FORMAT  32

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct DCFORMAT{
	BYTE Format;
	BYTE Index;
}TDCFormat, *PDCFormat;

//¿?¿?¿?¿?¿?¿?
typedef struct DCLOCK{
  TObject     object;        //¿?¿?¿?¿?¿?¿?¿?
  WORD        type;
  WORD        reserved;
  TTimeStamp  basetime;
  TTimeStamp  fromtime;
  TTimeStamp  totime;
  long        yearoffset;    //¿?¿?¿?¿?
  long        monthoffset;   //¿?¿?¿?¿?
  long        dayoffset;     //¿?¿?¿?¿?
  long        timeoffset;    //¿?¿?¿?¿?¿?(¿?¿?)
  TDCFormat   formats[MAX_DATETIME_FORMAT];  //¿?¿?¿?¿?
}TDClock;
typedef TDClock * PDClock;

//¿?¿?¿?¿?¿?¿?
typedef struct COUNTER{
  TObject     object;
  TTimeStamp  basetime;
  WORD        ftype;
  WORD        format;
  DWORD       reserved;
}TCounter;
typedef TCounter * PCounter;

typedef struct _RGB{
  BYTE   r;
  BYTE   g;
  BYTE   b;
}TRGB;
typedef TRGB * PRGB;

#define ETHER_ADDRESS_LENGTH 6
#define IP_ADDRESS_LENGTH    4

typedef struct BOARDPARAM{
  WORD   width;
  WORD   height;
  WORD   type;
  WORD   frequency;
  DWORD  flag;
  DWORD  uart;								//+2+2+2+2+4+4=16
  BYTE   mac[ETHER_ADDRESS_LENGTH];
  BYTE   ip[IP_ADDRESS_LENGTH];
  BYTE   gateMAC[ETHER_ADDRESS_LENGTH];
  BYTE   serverIP[IP_ADDRESS_LENGTH];		//+6+4+6+4=36
  BYTE   brightness;
  BYTE   importflag;
  BYTE   rootcount;
  BYTE   disconnect_sec;
  DWORD  rom_size;
  long   left;
  long   top;								//+4+4+4+4=52
  WORD   scan_mode;
  WORD   server_port;
  WORD   line_order;
  WORD   oe_time;
  WORD   shift_freq;
  WORD   refresh_freq;						//+2+2+2+2+2+2=64;
  BYTE   GateIP[IP_ADDRESS_LENGTH];
  BYTE   ipMask[IP_ADDRESS_LENGTH];			//+4+4=72
  BYTE   name[32];
  DWORD  ident;
  DWORD  address;							//+32+4+4=112
  DWORD  pkp_rx_timeo;
  DWORD  pkp_tx_timeo;
  DWORD  pkp_tx_repeat;
  BYTE   dnsIP[IP_ADDRESS_LENGTH];
  BYTE   dnsMAC[ETHER_ADDRESS_LENGTH];
  WORD   ReportTime;						//+12+4+6+2=136
  //¿?¿?server_host=0¿?¿?server_domain¿?¿?
  BYTE   serverDomain[32];
  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  DWORD  key;
  DWORD  pkp_length;                        //+32+4+4=176
  //¿?¿?¿?bin¿?¿?¿?
  char   bin_name[32];                      //+32=208
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?
  BYTE   light_sense;
  BYTE   light_sense_auto;
  WORD   light_sense_reserved;
  WORD   light_sense_split_val[8];
  BYTE   light_sense_bright_val[8];         //+28=236
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?¿?¿?¿?IP¿?¿?
  BYTE   TimeSyncIP[IP_ADDRESS_LENGTH];		//+4=240
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?
  BYTE   auto_reset_enabled;
  BYTE   auto_reset_type;
  BYTE   auto_reset_hour;
  BYTE   auto_reset_minute;
}TBoardParam, *PBoardParam;
int add(int a,int b);
#endif
#ifndef __system__
#define __system__

typedef   unsigned short  WORD;
typedef   unsigned char   BYTE;
typedef   unsigned long   DWORD;

#define   NULL ((void *)0)

#define CK_PLAY_ALWAYS    0
#define CK_PLAY_PERDAY    1
#define CK_PLAY_PERIOD    2

//¿?¿?¿?¿?¿?
#define LED_MONO			1
#define LED_DOUBLE			2

//¿?¿?¿?¿?¿?¿?
#define ROOT_UPDATE           0x13  //¿?¿?¿?¿?¿?¿?¿?
#define ROOT_FONTSET          0x14  //¿?¿?¿?¿?

#define ROOT_PLAY             0x21  //¿?¿?¿?¿?¿?¿?¿?¿?RAM¿?¿?¿?¿?¿?
#define ROOT_DOWNLOAD         0x22  //¿?¿?¿?¿?¿?¿?¿?¿?Flash
#define ROOT_PLAY_CHAPTER     0x23  //¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_REGION      0x25  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_LEAF        0x27  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define ROOT_PLAY_OBJECT      0x29  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY             0xB1  //¿?¿?¿?¿?¿?¿?¿?¿?RAM¿?¿?¿?¿?¿?
//#define ROOT_DOWNLOAD         0xB2  //¿?¿?¿?¿?¿?¿?¿?¿?Flash
//#define ROOT_PLAY_CHAPTER     0xB3  //¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_REGION      0xB5  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_LEAF        0xB7  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
//#define ROOT_PLAY_OBJECT      0xB9  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?

#define ACTMODE_INSERT        0x00
#define ACTMODE_REPLACE       0x01

#define ID_CHAPTER            0x3F
#define ID_REGION             0x3E
#define ID_LEAF               0x30
#define ID_WINDOW             0x31
#define ID_DCLOCK             0x32
#define ID_STRING             0x33
#define ID_EFFECT             0x34
#define ID_FONTSET            0xEE
#define ID_PIXELS             0x36
#define ID_PIXELSET           0x37
#define ID_MOVIE              0x38
#define ID_COUNTER	          0x39
#define ID_WINDOWS            0x3B
#define ID_STRINGS            0x3C

#define ID_TEMPERATURE        0x50
#define ID_HUMIDITY           0x51
#define ID_NOISE              0x52
#define ID_IMPORT             0x53
#define ID_ACLOCK             0x60
#define ID_CAMPAIGNTIME       0x61

#define PLAY_MODE_NORMAL      0x00  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define PLAY_MODE_WAIT        0x01  //¿?¿?¿?¿?¿?¿?¿?¿?

#define FONT_SET_16           0x0
#define FONT_SET_24           0x1

#define BITMAP_RED            1
#define BITMAP_GREEN          2
#define BITMAP_YELLOW         3
#define BITMAP_COLOR          4

#define DF_YEAR               1
#define DF_MONTH              2
#define DF_DAY                3
#define DF_WEEK               4
#define DF_HOUR               5
#define DF_MINUTE             6
#define DF_SECOND             7
#define DF_USER               8
#define DF_FLICKER            9
#define DF_CHNDATE            10
#define DF_CHNMONTH           10
#define DF_CHNDAY             11

typedef struct _RECT{
  long left;
  long top;
  long right;
  long bottom;
}TRect, *PRect;

typedef struct TIMESTAMP{
  long time;
  long date;
}TTimeStamp, *PTimeStamp;

typedef struct FONTSET{
  WORD  id;             //¿?¿?¿?¿?
  WORD  width;          //¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?
  BYTE  name[16];       //¿?¿?¿?¿?¿?
}TFontSet;
typedef TFontSet * PFontSet;

//¿?¿?¿?¿?¿?
typedef struct ROOT{
  WORD  id;              //¿?¿?¿?¿?¿?
  WORD  color;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  DWORD size;            //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD count;           //¿?¿?¿?¿?¿?
  long  survive;         //¿?¿?¿?¿?¿?¿?
  WORD  flag;            //¿?¿?
  WORD  Reserved;
}TRoot, *PRoot;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct CUSTOMACTION{
  TRoot header;          //¿?¿?¿?¿?¿?
  WORD  actionmode;      //¿?¿?¿?¿?(¿?¿?/¿?¿?)
  WORD  chapterindex;    //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  regionindex;     //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  leafindex;       //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  objectindex;     //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  reserved;
}TCustomAction, *PCustomAction;

//¿?¿?¿?¿?¿?¿?¿?
typedef struct CHAPTER{
  WORD  id;             //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  no;             //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  wait;           //¿?¿?¿?¿?¿?¿?¿?¿?(=1¿?¿?; =0¿?¿?¿?¿?¿?)
  WORD  repeat;         //¿?¿?¿?¿?¿?¿?
  WORD  count;          //¿?¿?¿?¿?¿?¿?
  WORD  Reserved;
  DWORD time;
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  kind;           //¿?¿?¿?¿?¿?¿?0=¿?¿?¿?¿?¿?1=¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?3=¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  week;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  TTimeStamp fromtime;  //¿?¿?¿?¿?
  TTimeStamp totime;    //¿?¿?¿?¿?
}TChapter, *PChapter;

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct REGION{
  WORD  id;             //¿?¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  no;             //¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  over;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?mode¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  count;          //¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  TRect rect;           //¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  Reserved1;
  WORD  Reserved2;
}TRegion, *PRegion;

//¿?¿?¿?¿?¿?¿?¿?
typedef struct LEAF{
  WORD  id;             //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  no;
  WORD  wait;           //¿?¿?¿?¿?¿?¿?¿?¿?(=1¿?¿?; =0¿?¿?¿?¿?¿?)
  WORD  serial;         //¿?¿?¿?¿?¿?¿?¿?¿?
  WORD  count;          //¿?¿?¿?¿?
  WORD  Reserved;
  DWORD time;           //¿?¿?¿?¿?¿?¿?
  DWORD size;           //¿?¿?¿?¿?¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  WORD  Reserved1;
  WORD  Reserved2;
}TLeaf, *PLeaf;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct OBJECT{
  WORD  id;             //¿?¿?¿?¿?
  BYTE  transparent;    //¿?¿?¿?¿?
  BYTE  border;
  DWORD size;           //¿?¿?¿?¿?¿?
  TRect rect;           //¿?¿?¿?¿?¿?¿?
}TObject, *PObject;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?TWindow¿?¿?¿?¿?¿?¿?TString¿?¿?
typedef struct WINDOWS{
  TObject     object;     //¿?¿?¿?¿?¿?¿?¿?
  BYTE        method;     //¿?¿?¿?¿?
  BYTE        speed;      //¿?¿?¿?¿?
  WORD        count;      //¿?¿?¿?¿?Window¿?¿?
}TWindows;
typedef TWindows * PWindows;

//¿?¿?¿?¿?¿?¿?
typedef struct STRING{
  WORD        id;
  BYTE        inMethod;   //¿?¿?¿?¿?
  BYTE        outMethod;  //¿?¿?¿?¿?
  BYTE        stopMethod; //¿?¿?¿?¿?
  BYTE        reserved;
  WORD        inSpeed;    //¿?¿?¿?¿?
  WORD        outSpeed;   //¿?¿?¿?¿?
  WORD        stopSpeed;  //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD       stoptime;   //¿?¿?¿?¿?
  long        stopx;      //¿?¿?¿?¿?
  DWORD       size;       //¿?¿?¿?¿?
  DWORD       color;      //¿?¿?¿?¿?
  WORD        fontset;    //¿?¿?¿?(¿?¿?¿?¿? 0=16¿?¿? 1=24¿?¿?)
  WORD        Reserved;
}TString;
typedef TString * PString;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?TPixels
typedef struct WINDOW{
  WORD        id;
  BYTE        inMethod;   //¿?¿?¿?¿?
  BYTE        outMethod;  //¿?¿?¿?¿?
  BYTE        stopMethod; //¿?¿?¿?¿?
  BYTE        reserved;
  WORD        inSpeed;    //¿?¿?¿?¿?
  WORD        outSpeed;   //¿?¿?¿?¿?
  WORD        stopSpeed;  //¿?¿?¿?¿?(¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?)
  DWORD       stoptime;   //¿?¿?¿?¿?
  long        stopx;      //¿?¿?¿?¿?
  DWORD       size;       //¿?¿?¿?¿?
}TWindow;
typedef TWindow * PWindow;

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct PIXELS{
  WORD   id;            //¿?¿?¿?¿?
  WORD   bits;          //¿?¿?¿?¿?¿?
  long   width;         //¿?¿?¿?¿?
  long   height;        //¿?¿?¿?¿?
  DWORD  size;          //¿?¿?¿?¿?
}TPixels;
typedef TPixels * PPixels;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct PIXELSET{
  WORD   id;            //¿?¿?¿?¿?
  WORD   count;         //TPixels¿?¿?¿?¿?
  DWORD  size;          //¿?¿?¿?¿?¿?
}TPixelSet;
typedef TPixelSet * PPixelSet;

//¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
#define MAX_DATETIME_FORMAT  32

//¿?¿?¿?¿?¿?¿?¿?¿?
typedef struct DCFORMAT{
	BYTE Format;
	BYTE Index;
}TDCFormat, *PDCFormat;

//¿?¿?¿?¿?¿?¿?
typedef struct DCLOCK{
  TObject     object;        //¿?¿?¿?¿?¿?¿?¿?
  WORD        type;
  WORD        reserved;
  TTimeStamp  basetime;
  TTimeStamp  fromtime;
  TTimeStamp  totime;
  long        yearoffset;    //¿?¿?¿?¿?
  long        monthoffset;   //¿?¿?¿?¿?
  long        dayoffset;     //¿?¿?¿?¿?
  long        timeoffset;    //¿?¿?¿?¿?¿?(¿?¿?)
  TDCFormat   formats[MAX_DATETIME_FORMAT];  //¿?¿?¿?¿?
}TDClock;
typedef TDClock * PDClock;

//¿?¿?¿?¿?¿?¿?
typedef struct COUNTER{
  TObject     object;
  TTimeStamp  basetime;
  WORD        ftype;
  WORD        format;
  DWORD       reserved;
}TCounter;
typedef TCounter * PCounter;

typedef struct _RGB{
  BYTE   r;
  BYTE   g;
  BYTE   b;
}TRGB;
typedef TRGB * PRGB;

#define ETHER_ADDRESS_LENGTH 6
#define IP_ADDRESS_LENGTH    4

typedef struct BOARDPARAM{
  WORD   width;
  WORD   height;
  WORD   type;
  WORD   frequency;
  DWORD  flag;
  DWORD  uart;								//+2+2+2+2+4+4=16
  BYTE   mac[ETHER_ADDRESS_LENGTH];
  BYTE   ip[IP_ADDRESS_LENGTH];
  BYTE   gateMAC[ETHER_ADDRESS_LENGTH];
  BYTE   serverIP[IP_ADDRESS_LENGTH];		//+6+4+6+4=36
  BYTE   brightness;
  BYTE   importflag;
  BYTE   rootcount;
  BYTE   disconnect_sec;
  DWORD  rom_size;
  long   left;
  long   top;								//+4+4+4+4=52
  WORD   scan_mode;
  WORD   server_port;
  WORD   line_order;
  WORD   oe_time;
  WORD   shift_freq;
  WORD   refresh_freq;						//+2+2+2+2+2+2=64;
  BYTE   GateIP[IP_ADDRESS_LENGTH];
  BYTE   ipMask[IP_ADDRESS_LENGTH];			//+4+4=72
  BYTE   name[32];
  DWORD  ident;
  DWORD  address;							//+32+4+4=112
  DWORD  pkp_rx_timeo;
  DWORD  pkp_tx_timeo;
  DWORD  pkp_tx_repeat;
  BYTE   dnsIP[IP_ADDRESS_LENGTH];
  BYTE   dnsMAC[ETHER_ADDRESS_LENGTH];
  WORD   ReportTime;						//+12+4+6+2=136
  //¿?¿?server_host=0¿?¿?server_domain¿?¿?
  BYTE   serverDomain[32];
  //¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?¿?
  DWORD  key;
  DWORD  pkp_length;                        //+32+4+4=176
  //¿?¿?¿?bin¿?¿?¿?
  char   bin_name[32];                      //+32=208
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?
  BYTE   light_sense;
  BYTE   light_sense_auto;
  WORD   light_sense_reserved;
  WORD   light_sense_split_val[8];
  BYTE   light_sense_bright_val[8];         //+28=236
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?¿?¿?¿?IP¿?¿?
  BYTE   TimeSyncIP[IP_ADDRESS_LENGTH];		//+4=240
  //////////////////////////////////////////////////////
  //¿?¿?¿?¿?¿?¿?
  BYTE   auto_reset_enabled;
  BYTE   auto_reset_type;
  BYTE   auto_reset_hour;
  BYTE   auto_reset_minute;
}TBoardParam, *PBoardParam;
#endif

